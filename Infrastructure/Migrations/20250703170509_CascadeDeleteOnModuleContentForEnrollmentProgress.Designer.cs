// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MiniCourseraContext))]
    [Migration("20250703170509_CascadeDeleteOnModuleContentForEnrollmentProgress")]
    partial class CascadeDeleteOnModuleContentForEnrollmentProgress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollmentsCount")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SubjectID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorID");

                    b.HasIndex("LanguageID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Domain.Entities.CourseModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseModules");
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique();

                    b.ToTable("Enrollments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("ModuleContentId");

                    b.HasIndex("EnrollmentId", "ModuleContentId")
                        .IsUnique();

                    b.ToTable("EnrollmentProgresses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LanguageId");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            Name = "English"
                        },
                        new
                        {
                            LanguageId = 2,
                            Name = "Spanish"
                        },
                        new
                        {
                            LanguageId = 3,
                            Name = "French"
                        },
                        new
                        {
                            LanguageId = 4,
                            Name = "Arabic"
                        },
                        new
                        {
                            LanguageId = 5,
                            Name = "Portuguese (Brazil)"
                        },
                        new
                        {
                            LanguageId = 6,
                            Name = "German"
                        },
                        new
                        {
                            LanguageId = 7,
                            Name = "Chinese (China)"
                        },
                        new
                        {
                            LanguageId = 8,
                            Name = "Japanese"
                        },
                        new
                        {
                            LanguageId = 9,
                            Name = "Indonesian"
                        },
                        new
                        {
                            LanguageId = 10,
                            Name = "Russian"
                        },
                        new
                        {
                            LanguageId = 11,
                            Name = "Korean"
                        },
                        new
                        {
                            LanguageId = 12,
                            Name = "Hindi"
                        },
                        new
                        {
                            LanguageId = 13,
                            Name = "Turkish"
                        },
                        new
                        {
                            LanguageId = 14,
                            Name = "Ukrainian"
                        },
                        new
                        {
                            LanguageId = 15,
                            Name = "Italian"
                        },
                        new
                        {
                            LanguageId = 16,
                            Name = "Thai"
                        },
                        new
                        {
                            LanguageId = 17,
                            Name = "Polish"
                        },
                        new
                        {
                            LanguageId = 18,
                            Name = "Dutch"
                        },
                        new
                        {
                            LanguageId = 19,
                            Name = "Swedish"
                        },
                        new
                        {
                            LanguageId = 20,
                            Name = "Greek"
                        },
                        new
                        {
                            LanguageId = 21,
                            Name = "Kazakh"
                        },
                        new
                        {
                            LanguageId = 22,
                            Name = "Hungarian"
                        },
                        new
                        {
                            LanguageId = 23,
                            Name = "Azerbaijani"
                        },
                        new
                        {
                            LanguageId = 24,
                            Name = "Vietnamese"
                        },
                        new
                        {
                            LanguageId = 25,
                            Name = "Pushto"
                        },
                        new
                        {
                            LanguageId = 26,
                            Name = "Chinese (Traditional)"
                        },
                        new
                        {
                            LanguageId = 27,
                            Name = "Hebrew"
                        },
                        new
                        {
                            LanguageId = 28,
                            Name = "Portuguese"
                        },
                        new
                        {
                            LanguageId = 29,
                            Name = "Portuguese (Portugal)"
                        },
                        new
                        {
                            LanguageId = 30,
                            Name = "Catalan"
                        },
                        new
                        {
                            LanguageId = 31,
                            Name = "Croatian"
                        },
                        new
                        {
                            LanguageId = 32,
                            Name = "Kannada"
                        },
                        new
                        {
                            LanguageId = 33,
                            Name = "Swahili"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ModuleContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseModuleID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseModuleID");

                    b.ToTable("ModuleContents");
                });

            modelBuilder.Entity("Domain.Entities.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            Name = "Business"
                        },
                        new
                        {
                            SubjectId = 2,
                            Name = "Computer Science"
                        },
                        new
                        {
                            SubjectId = 3,
                            Name = "Information Technology"
                        },
                        new
                        {
                            SubjectId = 4,
                            Name = "Data Science"
                        },
                        new
                        {
                            SubjectId = 5,
                            Name = "Health"
                        },
                        new
                        {
                            SubjectId = 6,
                            Name = "Physical Science and Engineering"
                        },
                        new
                        {
                            SubjectId = 7,
                            Name = "Social Sciences"
                        },
                        new
                        {
                            SubjectId = 8,
                            Name = "Arts and Humanities"
                        },
                        new
                        {
                            SubjectId = 9,
                            Name = "Personal Development"
                        },
                        new
                        {
                            SubjectId = 10,
                            Name = "Language Learning"
                        },
                        new
                        {
                            SubjectId = 11,
                            Name = "Math and Logic"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("UserType")
                        .HasColumnType("tinyint")
                        .HasComment("1=Student, 2=Instructor");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("UserType")
                        .HasDatabaseName("IX_Users_UserType");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "System",
                            Password = "hashed_password_here",
                            UserType = (byte)0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Domain.Entities.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectID");

                    b.Navigation("Instructor");

                    b.Navigation("Language");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entities.CourseModule", b =>
                {
                    b.HasOne("Domain.Entities.Course", null)
                        .WithMany("CourseModules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentProgress", b =>
                {
                    b.HasOne("Domain.Entities.Enrollment", "Enrollment")
                        .WithMany("enrollmentProgresses")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ModuleContent", "ModuleContent")
                        .WithMany()
                        .HasForeignKey("ModuleContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("ModuleContent");
                });

            modelBuilder.Entity("Domain.Entities.ModuleContent", b =>
                {
                    b.HasOne("Domain.Entities.CourseModule", "courseModule")
                        .WithMany("ModuleContents")
                        .HasForeignKey("CourseModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("courseModule");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseModules");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Domain.Entities.CourseModule", b =>
                {
                    b.Navigation("ModuleContents");
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.Navigation("enrollmentProgresses");
                });

            modelBuilder.Entity("Domain.Entities.Language", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Domain.Entities.Subject", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
